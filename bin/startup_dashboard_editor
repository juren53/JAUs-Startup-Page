#!/usr/bin/env bash

# Startup Dashboard Editor CLI
# A command-line interface for JAU's Startup Page Dashboard Editor
# 
# This script provides a system-wide command to launch the PyQt6 GUI application
# with optional file arguments and command-line options.

set -euo pipefail

# Get the directory where this script is located (resolve symlinks)
SCRIPT_PATH="$(readlink -f "${BASH_SOURCE[0]}")"
SCRIPT_DIR="$(dirname "$SCRIPT_PATH")"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
PYTHON_SCRIPT="$PROJECT_ROOT/startup_dashboard_editor.py"

# Version information
VERSION="2025.09.10"
PROGRAM_NAME="Startup Dashboard Editor"

# Help text
show_help() {
    cat << EOF
$PROGRAM_NAME v$VERSION

A PyQt6-based visual editor for JAU's Startup Page HTML bookmark manager.

USAGE:
    startup_dashboard_editor [OPTIONS] [FILE]

OPTIONS:
    -h, --help              Show this help message
    -v, --version           Show version information
    -f, --file FILE         Open specific HTML file on startup
    --verbose               Enable verbose output
    --check-version         Check if local version is up to date with GitHub
    
ARGUMENTS:
    FILE                    HTML file to open (optional)

EXAMPLES:
    startup_dashboard_editor                    # Launch with default/last file
    startup_dashboard_editor Startup.html      # Open specific file
    startup_dashboard_editor --file ~/my.html  # Open file with explicit flag
    startup_dashboard_editor --check-version   # Check for updates and exit
    startup_dashboard_editor --help            # Show this help

ENVIRONMENT:
    STARTUP_EDITOR_DEBUG    Set to '1' for debug output
    DISPLAY                 Required for GUI (X11/Wayland)

FILES:
    ~/.startup-dashboard-editor/    User configuration directory
    ~/.startup-dashboard-editor/settings.json    Application settings

REQUIREMENTS:
    - Python 3.6+
    - PyQt6
    - BeautifulSoup4
    - lxml
    - requests (for version checking)

For more information, visit: https://github.com/juren53/JAUs-Startup-Page
EOF
}

# Version information
show_version() {
    echo "$PROGRAM_NAME v$VERSION"
    echo "PyQt6-based HTML bookmark manager editor"
    echo "Repository: https://github.com/juren53/JAUs-Startup-Page"
    
    # Show git commit info if available
    if command -v git >/dev/null 2>&1 && [ -d "$PROJECT_ROOT/.git" ]; then
        cd "$PROJECT_ROOT"
        local commit_hash=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
        local commit_date=$(git log -1 --format=%cd --date=short 2>/dev/null || echo "unknown")
        echo "Git commit: $commit_hash ($commit_date)"
    fi
    
    # Show Python and PyQt6 versions if possible
    if command -v python3 >/dev/null 2>&1; then
        local python_version=$(python3 --version 2>&1 | cut -d' ' -f2)
        echo "Python: $python_version"
        
        # Try to get PyQt6 version
        local pyqt_version=$(python3 -c "from PyQt6.QtCore import PYQT_VERSION_STR; print(PYQT_VERSION_STR)" 2>/dev/null || echo "not found")
        echo "PyQt6: $pyqt_version"
    fi
}

# Check for updates
check_version() {
    echo "Checking for updates..."
    
    if [ ! -f "$PROJECT_ROOT/tools/version_checker.py" ]; then
        echo "Error: Version checker not found at $PROJECT_ROOT/tools/version_checker.py"
        exit 1
    fi
    
    cd "$PROJECT_ROOT"
    python3 tools/version_checker.py --file Startup.html
}

# Debug output function
debug() {
    if [ "${STARTUP_EDITOR_DEBUG:-0}" = "1" ]; then
        echo "[DEBUG] $*" >&2
    fi
}

# Error handling
error() {
    echo "Error: $*" >&2
    exit 1
}

# Validate environment
validate_environment() {
    debug "Validating environment..."
    
    # Check if we're in a display environment
    if [ -z "${DISPLAY:-}" ] && [ -z "${WAYLAND_DISPLAY:-}" ]; then
        error "No display environment found. This is a GUI application requiring X11 or Wayland."
    fi
    
    # Check if Python 3 is available
    if ! command -v python3 >/dev/null 2>&1; then
        error "Python 3 is required but not found in PATH."
    fi
    
    # Check if the main Python script exists
    if [ ! -f "$PYTHON_SCRIPT" ]; then
        error "Main application script not found at: $PYTHON_SCRIPT"
    fi
    
    debug "Environment validation passed"
}

# Main execution function
main() {
    local file_to_open=""
    local check_version_only=false
    local verbose=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -f|--file)
                if [ $# -lt 2 ]; then
                    error "Option $1 requires an argument"
                fi
                file_to_open="$2"
                shift 2
                ;;
            --check-version)
                check_version_only=true
                shift
                ;;
            --verbose)
                verbose=true
                export STARTUP_EDITOR_DEBUG=1
                shift
                ;;
            -*)
                error "Unknown option: $1. Use --help for usage information."
                ;;
            *)
                # Treat as filename argument
                if [ -n "$file_to_open" ]; then
                    error "Multiple file arguments provided. Use -f/--file for explicit file specification."
                fi
                file_to_open="$1"
                shift
                ;;
        esac
    done
    
    # Handle version check mode
    if [ "$check_version_only" = true ]; then
        check_version
        exit $?
    fi
    
    # Validate environment before launching
    validate_environment
    
    debug "Project root: $PROJECT_ROOT"
    debug "Python script: $PYTHON_SCRIPT"
    debug "File to open: ${file_to_open:-<none>}"
    
    # Prepare launch arguments
    local launch_args=()
    
    if [ -n "$file_to_open" ]; then
        # Convert relative path to absolute path
        if [ ! -f "$file_to_open" ]; then
            error "File not found: $file_to_open"
        fi
        file_to_open="$(realpath "$file_to_open")"
        launch_args+=("$file_to_open")
        debug "Opening file: $file_to_open"
    fi
    
    # Change to project directory and launch
    cd "$PROJECT_ROOT"
    
    if [ "$verbose" = true ]; then
        echo "Launching $PROGRAM_NAME..."
        echo "Working directory: $(pwd)"
        echo "Python script: $PYTHON_SCRIPT"
        if [ ${#launch_args[@]} -gt 0 ]; then
            echo "Arguments: ${launch_args[*]}"
        fi
    fi
    
    # Launch the GUI application
    exec python3 "$PYTHON_SCRIPT" "${launch_args[@]}"
}

# Execute main function with all arguments
main "$@"
